const Type = require("../models/type");
const File = require("../models/file");
const catchAsyncErrors = require("../middlewares/catchAsyncErrors");

// üìå L·∫•y t·∫•t c·∫£ lo·∫°i √°n
exports.getAllTypes = catchAsyncErrors(async (req, res, next) => {
  const types = await Type.find().sort({ createdAt: -1 });
  res.status(200).json({
    errCode: 0,
    message: "L·∫•y danh s√°ch lo·∫°i √°n th√†nh c√¥ng",
    data: types,
  });
});

// üìå Th√™m m·ªõi lo·∫°i √°n
exports.createType = catchAsyncErrors(async (req, res, next) => {
  const { name } = req.body;

  if (!name || name.trim() === "") {
    return res.status(400).json({
      errCode: 1,
      message: "T√™n lo·∫°i √°n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
    });
  }

  const trimmedName = name.trim();

  const existingType = await Type.findOne({ type: trimmedName });
  if (existingType) {
    return res.status(400).json({
      errCode: 2,
      message: "Lo·∫°i √°n ƒë√£ t·ªìn t·∫°i",
    });
  }

  const newType = await Type.create({ type: trimmedName });

  res.status(201).json({
    errCode: 0,
    message: "T·∫°o lo·∫°i √°n th√†nh c√¥ng",
    data: newType,
  });
});

// üìå Xo√° lo·∫°i √°n theo ID
exports.deleteType = catchAsyncErrors(async (req, res, next) => {
  const { id } = req.params;

  const type = await Type.findById(id);
  if (!type) {
    return res.status(404).json({
      errCode: 1,
      message: "Kh√¥ng t√¨m th·∫•y lo·∫°i √°n",
    });
  }

  // üîç Ki·ªÉm tra xem c√≥ file n√†o ƒëang d√πng lo·∫°i √°n n√†y kh√¥ng
  const fileUsingType = await File.findOne({ type: id });

  if (fileUsingType) {
    return res.status(400).json({
      errCode: 2,
      message: "Kh√¥ng th·ªÉ xo√° lo·∫°i √°n v√¨ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong file",
    });
  }

  await Type.findByIdAndDelete(id);

  res.status(200).json({
    errCode: 0,
    message: "Xo√° lo·∫°i √°n th√†nh c√¥ng",
  });
});
